plugins {
    id 'java'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
}

def MT_TOKEN = System.getenv("MODRINTH_TOKEN")
def CF_TOKEN = System.getenv("CURSEFORGE_TOKEN")

java {
    withSourcesJar()
}

base {
    archivesName = modid
    version = "$modloader-mc$minecraftversion-v$modversion"
}

java.toolchain {
    languageVersion = JavaLanguageVersion.of(Integer.valueOf(javaversion))
}

minecraft {
    mappings channel: mappingschannel, version: mappingsversion
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    copyIdeResources = true
    // generateRunFolders = true
    // folderName = "runs"

    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'terminal.jline', 'true'
            arg "-mixin.config=${modid}.${mixin_file_suffix}"
            arg '--nogui'
            mods {
                "$modid" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', modid
        }

        server {
            property 'forge.enabledGameTestNamespaces', modid
        }
    }
}

mixin {
    config "${modid}.${mixin_file_suffix}"
    add sourceSets.main, "${modid}.${mixin_refmap_suffix}"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url "https://repo.spongepowered.org/maven" }
    maven { url "https://maven.fabricmc.net/" }
    maven { url "https://www.cursemaven.com"
        content { includeGroup "curse.maven" }
    }
    maven { url 'https://jitpack.io' }
}

configurations {
    shadeLibrary
    implementation.extendsFrom shadeLibrary
}

/* TELLS FORGE TO IDENTIFY LIBRARY CLASSES  */
minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.shadeLibrary.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

jarJar.enable()

dependencies {
    minecraft "net.minecraftforge:forge:${minecraftversion}-${forgeversion}"
    annotationProcessor "net.fabricmc:sponge-mixin:${mixin_fabric_version}+mixin.${mixin_version}"

    // JARJAR MIXIN EXTRA
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixinextra_version}"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:${mixinextra_version}")) {
        jarJar.ranged(it, mixinextra_version_range)
    }
}

tasks.processResources.outputs.upToDateWhen { false }
processResources {
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta', "${modid}.${mixin_file_suffix}".toString()]) {
        expand project.properties
    }

}

jar {
    manifest {
        attributes([
                "Specification-Title"       : modid,
                "Specification-Vendor"      : modauthors,
                "Specification-Version"     : version,
                "Implementation-Title"      : modname,
                "Implementation-Version"    : modversion,
                "Implementation-Vendor"     : modauthors,
                "Implementation-Timestamp"  : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"              : "$modid.$mixin_file_suffix"
        ])
    }
    from {
        configurations.shadeLibrary.collect {
            it.isDirectory() ? it.matching {
                exclude '*', 'META-INF/**'
            } : zipTree(it).matching {
                exclude '*', 'META-INF/**'
            }
        }
    }
    from("LICENSE") {
        rename { "${it}_${base.archivesName.get()}"}
    }

    finalizedBy 'reobfJar'
}

publishMods {
    file = jar.archiveFile
    changelog = getChangelogText()
    type = STABLE
    displayName = "$modname/$project.properties.version"
    modLoaders.add(modloader.toLowerCase())
    additionalFiles.from(sourcesJar.archiveFile)
    maxRetries = 2

    dryRun = false

    curseforge {
        accessToken = CF_TOKEN
        projectId = curseforgeid
        minecraftVersions.addAll(minecraftversion)
        javaVersions.addAll(JavaVersion.VERSION_17)
        clientRequired = true
        serverRequired = true
        projectSlug = modid
        additionalFile(sourcesJar) {
            name = "$modid-sources/${project.properties.version}"
        }
    }

    modrinth {
        accessToken = MT_TOKEN
        projectId = modrinthid
        minecraftVersions.addAll(minecraftversion)
    }
}

def getChangelogText() {
    def result = ""
    for (String line: file('CHANGELOG.md').readLines('UTF-8')) {
        if (line.isEmpty()) return result
        result += line + '\n'
    }
    return result
}